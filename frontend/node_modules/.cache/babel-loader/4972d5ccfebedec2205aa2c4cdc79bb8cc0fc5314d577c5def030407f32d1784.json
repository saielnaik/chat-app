{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91832\\\\Documents\\\\GitHub\\\\chat-app\\\\frontend\\\\src\\\\pages\\\\SetAvatar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport loader from '../loader.gif';\nimport { useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetAvatar() {\n  _s();\n  const [avatars, setAvatars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 5000,\n    pauseOnHover: true,\n    theme: \"dark\"\n  };\n  const setProfile = async () => {\n    // Your logic for setting profile here\n  };\n  const api = `https://api.multiavatar.com/4645646`;\n  const fetchAvatars = async (retryCount = 0) => {\n    const data = [];\n    const maxRetries = 3;\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n    try {\n      for (let i = 0; i < 4; i++) {\n        const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\n        const avatarData = btoa(image.data);\n        data.push(avatarData);\n      }\n      setAvatars(data);\n      setIsLoading(false);\n    } catch (error) {\n      if (error.response && error.response.status === 429 && retryCount < maxRetries) {\n        // Exponential backoff\n        const waitTime = Math.pow(2, retryCount) * 1000;\n        toast.warning(`Too many requests, retrying in ${waitTime / 1000} seconds...`, toastOptions);\n        await delay(waitTime);\n        fetchAvatars(retryCount + 1); // Retry the request\n      } else {\n        toast.error(\"Failed to fetch avatars. Please try again later.\", toastOptions);\n        setIsLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchAvatars();\n  }, [api]);\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-[#52347c]\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: loader,\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Pick an avatar as your profile picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatars-container\",\n          children: avatars.map((avatar, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `avatar ${selectedAvatar === index ? \"selected\" : \"\"}`,\n              onClick: () => setSelectedAvatar(index),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `data:image/svg+xml;base64,${avatar}`,\n                alt: \"avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setProfile,\n          children: \"Set Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(SetAvatar, \"oRD4rWrIe4czkeq5v+VdB1DPJko=\", false, function () {\n  return [useNavigate];\n});\n_c = SetAvatar;\nvar _c;\n$RefreshReg$(_c, \"SetAvatar\");","map":{"version":3,"names":["React","useEffect","useState","loader","useNavigate","ToastContainer","toast","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","SetAvatar","_s","avatars","setAvatars","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","toastOptions","position","autoClose","pauseOnHover","theme","setProfile","api","fetchAvatars","retryCount","data","maxRetries","delay","ms","Promise","resolve","setTimeout","i","image","get","Math","round","random","avatarData","btoa","push","error","response","status","waitTime","pow","warning","navigate","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","avatar","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/91832/Documents/GitHub/chat-app/frontend/src/pages/SetAvatar.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport loader from '../loader.gif';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios';\r\n\r\nexport default function SetAvatar() {\r\n    const [avatars, setAvatars] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [selectedAvatar, setSelectedAvatar] = useState(null);\r\n\r\n    const toastOptions = {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: \"dark\",\r\n    };\r\n\r\n    const setProfile = async () => {\r\n        // Your logic for setting profile here\r\n    };\r\n\r\n    const api = `https://api.multiavatar.com/4645646`;\r\n\r\n    const fetchAvatars = async (retryCount = 0) => {\r\n        const data = [];\r\n        const maxRetries = 3;\r\n        const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n        try {\r\n            for (let i = 0; i < 4; i++) {\r\n                const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\r\n\r\n                const avatarData = btoa(image.data);\r\n                data.push(avatarData);\r\n            }\r\n            setAvatars(data);\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 429 && retryCount < maxRetries) {\r\n                // Exponential backoff\r\n                const waitTime = Math.pow(2, retryCount) * 1000;\r\n                toast.warning(`Too many requests, retrying in ${waitTime / 1000} seconds...`, toastOptions);\r\n                await delay(waitTime);\r\n                fetchAvatars(retryCount + 1); // Retry the request\r\n            } else {\r\n                toast.error(\"Failed to fetch avatars. Please try again later.\", toastOptions);\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAvatars();\r\n    }, [api]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <>\r\n        <div className='bg-[#52347c]'>\r\n            {isLoading ? (\r\n                <img src={loader} alt=\"Loading...\" />\r\n            ) : (\r\n                <div>\r\n                    <div>Pick an avatar as your profile picture</div>\r\n                    <div className=\"avatars-container\">\r\n                        {avatars.map((avatar, index) => {\r\n                            return (\r\n                                <div\r\n                                    key={index}\r\n                                    className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"}`}\r\n                                    onClick={() => setSelectedAvatar(index)}\r\n                                >\r\n                                    <img src={`data:image/svg+xml;base64,${avatar}`} alt=\"avatar\" />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <button onClick={setProfile}>Set Profile</button>\r\n                </div>\r\n            )}\r\n            <ToastContainer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}